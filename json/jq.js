app.DOC = {"name":"jq","slug":"jq","type":"jq","links":{"home":"https://jqlang.github.io/jq/"},"release":"1.7","mtime":1696879417,"db_size":298058};
app.INDEXDOC = {"entries":[{"name":"$__loc__","path":"index#$__loc__","type":"Builtin operators and functions"},{"name":"$ENV, env","path":"index#$env-env","type":"Builtin operators and functions"},{"name":"$JQ_BUILD_CONFIGURATION","path":"index#$jq_build_configuration","type":"Builtin operators and functions"},{"name":".[]?","path":"index#.[]?","type":"Basic filters"},{"name":"==, !=","path":"index#==-!=","type":"Conditionals and Comparisons"},{"name":">, >=, <=, <","path":"index#>->=-<=-<","type":"Conditionals and Comparisons"},{"name":"abs","path":"index#abs","type":"Builtin operators and functions"},{"name":"add","path":"index#add","type":"Builtin operators and functions"},{"name":"Addition: +","path":"index#addition","type":"Builtin operators and functions"},{"name":"all, all(condition), all(generator; condition)","path":"index#all","type":"Builtin operators and functions"},{"name":"Alternative operator: //","path":"index#alternative-operator","type":"Conditionals and Comparisons"},{"name":"and, or, not","path":"index#and-or-not","type":"Conditionals and Comparisons"},{"name":"any, any(condition), any(generator; condition)","path":"index#any","type":"Builtin operators and functions"},{"name":"Arithmetic update-assignment: +=, -=, *=, /=, %=, //=","path":"index#arithmetic-update-assignment","type":"Assignment"},{"name":"Array construction: []","path":"index#array-construction","type":"Types and Values"},{"name":"Array Index: .[<number>]","path":"index#array-index","type":"Basic filters"},{"name":"Array/Object Value Iterator: .[]","path":"index#array-object-value-iterator","type":"Basic filters"},{"name":"Array/String Slice: .[<number>:<number>]","path":"index#array-string-slice","type":"Basic filters"},{"name":"arrays, objects, iterables, booleans, numbers, normals, finites, strings, nulls, values, scalars","path":"index#arrays-objects-iterables-booleans-numbers-normals-finites-strings-nulls-values-scalars","type":"Builtin operators and functions"},{"name":"ascii_downcase, ascii_upcase","path":"index#ascii_downcase-ascii_upcase","type":"Builtin operators and functions"},{"name":"Breaking out of control structures","path":"index#breaking-out-of-control-structures","type":"Conditionals and Comparisons"},{"name":"bsearch(x)","path":"index#bsearch","type":"Builtin operators and functions"},{"name":"builtins","path":"index#builtins","type":"Builtin operators and functions"},{"name":"capture(val), capture(regex; flags)","path":"index#capture","type":"Regular expressions"},{"name":"combinations, combinations(n)","path":"index#combinations","type":"Builtin operators and functions"},{"name":"Comma: ,","path":"index#comma","type":"Basic filters"},{"name":"Complex assignments","path":"index#complex-assignments","type":"Assignment"},{"name":"contains(element)","path":"index#contains","type":"Builtin operators and functions"},{"name":"Convert to/from JSON","path":"index#convert-to-from-json","type":"Builtin operators and functions"},{"name":"Dates","path":"index#dates","type":"Builtin operators and functions"},{"name":"debug, debug(msgs)","path":"index#debug","type":"I/O"},{"name":"Defining Functions","path":"index#defining-functions","type":"Advanced features"},{"name":"del(path_expression)","path":"index#del","type":"Builtin operators and functions"},{"name":"delpaths(PATHS)","path":"index#delpaths","type":"Builtin operators and functions"},{"name":"Destructuring Alternative Operator: ?//","path":"index#destructuring-alternative-operator","type":"Advanced features"},{"name":"empty","path":"index#empty","type":"Builtin operators and functions"},{"name":"endswith(str)","path":"index#endswith","type":"Builtin operators and functions"},{"name":"Error Suppression / Optional Operator: ?","path":"index#error-suppression-optional-operator","type":"Conditionals and Comparisons"},{"name":"error, error(message)","path":"index#error","type":"Builtin operators and functions"},{"name":"explode","path":"index#explode","type":"Builtin operators and functions"},{"name":"first(expr), last(expr), nth(n; expr)","path":"index#first-last-nth-2","type":"Advanced features"},{"name":"first, last, nth(n)","path":"index#first-last-nth-1","type":"Advanced features"},{"name":"flatten, flatten(depth)","path":"index#flatten","type":"Builtin operators and functions"},{"name":"floor","path":"index#floor","type":"Builtin operators and functions"},{"name":"foreach","path":"index#foreach","type":"Advanced features"},{"name":"Format strings and escaping","path":"index#format-strings-and-escaping","type":"Builtin operators and functions"},{"name":"fromstream(stream_expression)","path":"index#fromstream","type":"Streaming"},{"name":"Generators and iterators","path":"index#generators-and-iterators","type":"Advanced features"},{"name":"getpath(PATHS)","path":"index#getpath","type":"Builtin operators and functions"},{"name":"group_by(path_expression)","path":"index#group_by","type":"Builtin operators and functions"},{"name":"gsub(regex; tostring), gsub(regex; tostring; flags)","path":"index#gsub","type":"Regular expressions"},{"name":"halt","path":"index#halt","type":"Builtin operators and functions"},{"name":"halt_error, halt_error(exit_code)","path":"index#halt_error","type":"Builtin operators and functions"},{"name":"has(key)","path":"index#has","type":"Builtin operators and functions"},{"name":"Identity: .","path":"index#identity","type":"Basic filters"},{"name":"if-then-else-end","path":"index#if-then-else-end","type":"Conditionals and Comparisons"},{"name":"implode","path":"index#implode","type":"Builtin operators and functions"},{"name":"import RelativePathString as $NAME [<metadata>];","path":"index#import-relativepathstring-as-$name","type":"Modules"},{"name":"import RelativePathString as NAME [<metadata>];","path":"index#import-relativepathstring-as-name","type":"Modules"},{"name":"in","path":"index#in","type":"Builtin operators and functions"},{"name":"include RelativePathString [<metadata>];","path":"index#include-relativepathstring","type":"Modules"},{"name":"index(s), rindex(s)","path":"index#index-rindex","type":"Builtin operators and functions"},{"name":"indices(s)","path":"index#indices","type":"Builtin operators and functions"},{"name":"infinite, nan, isinfinite, isnan, isfinite, isnormal","path":"index#infinite-nan-isinfinite-isnan-isfinite-isnormal","type":"Builtin operators and functions"},{"name":"input","path":"index#input","type":"I/O"},{"name":"input_filename","path":"index#input_filename","type":"I/O"},{"name":"input_line_number","path":"index#input_line_number","type":"I/O"},{"name":"inputs","path":"index#inputs","type":"I/O"},{"name":"inside","path":"index#inside","type":"Builtin operators and functions"},{"name":"isempty(exp)","path":"index#isempty","type":"Advanced features"},{"name":"join(str)","path":"index#join","type":"Builtin operators and functions"},{"name":"keys, keys_unsorted","path":"index#keys-keys_unsorted","type":"Builtin operators and functions"},{"name":"length","path":"index#length","type":"Builtin operators and functions"},{"name":"limit(n; exp)","path":"index#limit","type":"Advanced features"},{"name":"ltrimstr(str)","path":"index#ltrimstr","type":"Builtin operators and functions"},{"name":"map(f), map_values(f)","path":"index#map-map_values","type":"Builtin operators and functions"},{"name":"match(val), match(regex; flags)","path":"index#match","type":"Regular expressions"},{"name":"min, max, min_by(path_exp), max_by(path_exp)","path":"index#min-max-min_by-max_by","type":"Builtin operators and functions"},{"name":"module <metadata>;","path":"index#module-<metadata>","type":"Modules"},{"name":"modulemeta","path":"index#modulemeta","type":"Modules"},{"name":"Multiplication, division, modulo: *, /, %","path":"index#multiplication-division-modulo","type":"Builtin operators and functions"},{"name":"Object Construction: {}","path":"index#object-construction","type":"Types and Values"},{"name":"Object Identifier-Index: .foo, .foo.bar","path":"index#object-identifier-index","type":"Basic filters"},{"name":"Object Index: .[<string>]","path":"index#object-index","type":"Basic filters"},{"name":"Optional Object Identifier-Index: .foo?","path":"index#optional-object-identifier-index","type":"Basic filters"},{"name":"Parenthesis","path":"index#parenthesis","type":"Basic filters"},{"name":"path(path_expression)","path":"index#path","type":"Builtin operators and functions"},{"name":"paths, paths(node_filter)","path":"index#paths","type":"Builtin operators and functions"},{"name":"pick(pathexps)","path":"index#pick","type":"Builtin operators and functions"},{"name":"Pipe: |","path":"index#pipe","type":"Basic filters"},{"name":"Plain assignment: =","path":"index#plain-assignment","type":"Assignment"},{"name":"range(upto), range(from; upto), range(from; upto; by)","path":"index#range","type":"Builtin operators and functions"},{"name":"recurse(f), recurse, recurse(f; condition)","path":"index#recurse","type":"Builtin operators and functions"},{"name":"Recursion","path":"index#recursion","type":"Advanced features"},{"name":"Recursive Descent: ..","path":"index#recursive-descent","type":"Types and Values"},{"name":"reduce","path":"index#reduce","type":"Advanced features"},{"name":"repeat(exp)","path":"index#repeat","type":"Builtin operators and functions"},{"name":"reverse","path":"index#reverse","type":"Builtin operators and functions"},{"name":"rtrimstr(str)","path":"index#rtrimstr","type":"Builtin operators and functions"},{"name":"scan(regex), scan(regex; flags)","path":"index#scan","type":"Regular expressions"},{"name":"Scoping","path":"index#scoping","type":"Advanced features"},{"name":"select(boolean_expression)","path":"index#select","type":"Builtin operators and functions"},{"name":"setpath(PATHS; VALUE)","path":"index#setpath","type":"Builtin operators and functions"},{"name":"sort, sort_by(path_expression)","path":"index#sort-sort_by","type":"Builtin operators and functions"},{"name":"split(regex; flags)","path":"index#split-2","type":"Regular expressions"},{"name":"split(str)","path":"index#split-1","type":"Builtin operators and functions"},{"name":"splits(regex), splits(regex; flags)","path":"index#splits","type":"Regular expressions"},{"name":"SQL-Style Operators","path":"index#sql-style-operators","type":"Builtin operators and functions"},{"name":"sqrt","path":"index#sqrt","type":"Builtin operators and functions"},{"name":"startswith(str)","path":"index#startswith","type":"Builtin operators and functions"},{"name":"stderr","path":"index#stderr","type":"I/O"},{"name":"String interpolation: \\(exp)","path":"index#string-interpolation","type":"Builtin operators and functions"},{"name":"sub(regex; tostring), sub(regex; tostring; flags)","path":"index#sub","type":"Regular expressions"},{"name":"Subtraction: -","path":"index#subtraction","type":"Builtin operators and functions"},{"name":"test(val), test(regex; flags)","path":"index#test","type":"Regular expressions"},{"name":"to_entries, from_entries, with_entries(f)","path":"index#to_entries-from_entries-with_entries","type":"Builtin operators and functions"},{"name":"tonumber","path":"index#tonumber","type":"Builtin operators and functions"},{"name":"tostream","path":"index#tostream","type":"Streaming"},{"name":"tostring","path":"index#tostring","type":"Builtin operators and functions"},{"name":"transpose","path":"index#transpose","type":"Builtin operators and functions"},{"name":"truncate_stream(stream_expression)","path":"index#truncate_stream","type":"Streaming"},{"name":"try-catch","path":"index#try-catch","type":"Conditionals and Comparisons"},{"name":"type","path":"index#type","type":"Builtin operators and functions"},{"name":"unique, unique_by(path_exp)","path":"index#unique-unique_by","type":"Builtin operators and functions"},{"name":"until(cond; next)","path":"index#until","type":"Builtin operators and functions"},{"name":"Update-assignment: |=","path":"index#update-assignment","type":"Assignment"},{"name":"utf8bytelength","path":"index#utf8bytelength","type":"Builtin operators and functions"},{"name":"Variable / Symbolic Binding Operator: ... as $identifier | ...","path":"index#variable-symbolic-binding-operator","type":"Advanced features"},{"name":"walk(f)","path":"index#walk","type":"Builtin operators and functions"},{"name":"while(cond; update)","path":"index#while","type":"Builtin operators and functions"}],"types":[{"name":"Advanced features","count":12,"slug":"advanced-features"},{"name":"Assignment","count":4,"slug":"assignment"},{"name":"Basic filters","count":11,"slug":"basic-filters"},{"name":"Builtin operators and functions","count":70,"slug":"builtin-operators-and-functions"},{"name":"Conditionals and Comparisons","count":8,"slug":"conditionals-and-comparisons"},{"name":"I/O","count":6,"slug":"i-o"},{"name":"Modules","count":5,"slug":"modules"},{"name":"Regular expressions","count":8,"slug":"regular-expressions"},{"name":"Streaming","count":3,"slug":"streaming"},{"name":"Types and Values","count":3,"slug":"types-and-values"}]};